{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["swap","array","index1","index2","temp","getMergeSortAnimations","copy","Object","toConsumableArray","len","length","animations","mergeSortHelper","aux","left","right","mid","Math","floor","i","j","k","push","merge","Array","getQuickSortAnimations","quickSortHelper","part","pivot","partition","ARR_LEN","MIN_NUM","MAX_NUM","DELAY","ACCESSED_COLOUR","SORTED_COLOUR","SortVisualizer","props","_useState","useState","_useState2","slicedToArray","setArr","_useState3","_useState4","isSorting","setIsSorting","_useState5","_useState6","isSorted","setIsSorted","containerRef","useRef","initialiseArray","resetArrayColour","shuffle","animateArrayUpdate","forEach","_ref","index","_ref2","comparison","swapped","setTimeout","prevArr","_comparison3","newValue","newArr","_comparison","animateArrayAccess","arrayBars","current","children","_loop","arrayBarStyle","style","backgroundColor","animateSortedArray","useEffect","react_default","a","createElement","className","ref","map","barHeight","height","concat","width","key","onClick","min","max","newSize","random","getInsertionSortAnimations","arr","randomIndex","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.07187951.chunk.js","sourcesContent":["//Function used to swap indexes in an arrayay\r\nexport function swap(array, index1, index2) {\r\n  const temp = array[index1];\r\n  array[index1] = array[index2];\r\n  array[index2] = temp;\r\n}\r\n\r\n//Insertion Sort Functions below\r\nexport function getInsertionSortAnimations(array) {\r\n  \r\n  //creates copy of array\r\n  const copy = [...array];\r\n\r\n  //used for color animation of the insertion sort\r\n  const animations = [];\r\n\r\n  //loops from first index to last starting from index 1\r\n  for (let i = 1; i < copy.length; i++) {\r\n    \r\n    //loops from index 1 less than i to 0\r\n    for (let j = i - 1; j >= 0; j--) {\r\n\r\n      //pushes the two indexes that are being compared\r\n      //to the animation array\r\n      animations.push([[j, j + 1], false]);\r\n\r\n      //checks if the left index is less than right\r\n      if (copy[j + 1] < copy[j]) {\r\n        //if true, pushes indexes for animations\r\n        animations.push([[j, copy[j + 1]], true]);\r\n        animations.push([[j + 1, copy[j]], true]);\r\n\r\n        //then swaps the indexes\r\n        swap(copy, j, j + 1);\r\n      } else break; //otherwise breaks\r\n    }\r\n  }\r\n  //then it returns animations\r\n  return animations;\r\n}\r\n\r\n//Merge Sort Functions Below\r\n\r\n//Merge Sort Animation Function\r\nexport function getMergeSortAnimations(array) {\r\n  \r\n  //creates copy of array\r\n  const copy = [...array];\r\n\r\n  //sets up variables for merge sort helper\r\n  const len = copy.length;\r\n  const aux = Array(len);\r\n  const animations = [];\r\n\r\n  //calls merge sort helper\r\n  mergeSortHelper(copy, aux, 0, len - 1, animations);\r\n\r\n  //returns animations\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(array, aux, left, right, animations) {\r\n  //if the left index is less than or equal to the left, end function\r\n  if (right <= left) return;\r\n\r\n  //finds the middle index of the array\r\n  const mid = left + Math.floor((right - left) / 2);\r\n\r\n  //recalls merge sort helper in the middle\r\n  mergeSortHelper(array, aux, left, mid, animations);\r\n\r\n  //then recalls merge sort one index up\r\n  mergeSortHelper(array, aux, mid + 1, right, animations);\r\n\r\n  //lastly calls merge for merge algorithm\r\n  merge(array, aux, left, mid, right, animations);\r\n}\r\n\r\nfunction merge(array, aux, left, mid, right, animations) {\r\n\r\n  //copies aux from left index to right\r\n  for (let i = left; i <= right; i++) aux[i] = array[i];\r\n  \r\n  //sets i and j for loop\r\n  let i = left;\r\n  let j = mid + 1;\r\n\r\n  //starts loop from left index to right index\r\n  for (let k = left; k <= right; k++) {\r\n    //if i is greater than the mid index\r\n    if (i > mid) {\r\n      //animations are pushed to animation array\r\n      animations.push([[j], false]);\r\n      animations.push([[k, aux[j]], true]);\r\n\r\n      //array value is altered\r\n      array[k] = aux[j++];\r\n\r\n    } else if (j > right) {\r\n      //animations are set accordingly\r\n      animations.push([[i], false]);\r\n      animations.push([[k, aux[i]], true]);\r\n\r\n      //array values are altered\r\n      array[k] = aux[i++];\r\n    } else if (aux[j] < aux[i]) {\r\n      //animations are set accordingly\r\n      animations.push([[i, j], false]);\r\n      animations.push([[k, aux[j]], true]);\r\n\r\n      //array values are altered\r\n      array[k] = aux[j++];\r\n    } else {\r\n      //animations are set accordingly\r\n      animations.push([[i, j], false]);\r\n      animations.push([[k, aux[i]], true]);\r\n\r\n      //array values are altered\r\n      array[k] = aux[i++];\r\n    }\r\n  }\r\n}\r\n\r\n//Quick Sort Functions Below\r\n\r\n//Quick sort animation function\r\nexport function getQuickSortAnimations(array) {\r\n  //copy of array is created\r\n  const copy = [...array];\r\n\r\n  //animation array is created\r\n  const animations = [];\r\n\r\n  //quick sort helper is called\r\n  quickSortHelper(copy, 0, copy.length - 1, animations);\r\n\r\n  //the animations are returned\r\n  return animations;\r\n}\r\n\r\n//Quick sort helper function\r\nfunction quickSortHelper(array, left, right, animations) {\r\n\r\n  //if right index is less than or equal to the left\r\n  if (right <= left) return;\r\n\r\n  //calls partititon and sets part to an index\r\n  const part = partition(array, left, right, animations);\r\n\r\n  //recursively calls quick sort helper\r\n  quickSortHelper(array, left, part, animations);\r\n  quickSortHelper(array, part + 1, right, animations);\r\n}\r\n\r\n//Partition function for quick sort\r\nfunction partition(array, left, right, animations) {\r\n  \r\n  //sets i and j for loop\r\n  let i = left;\r\n  let j = right + 1;\r\n\r\n  //sets pivot as value at left\r\n  const pivot = array[left];\r\n\r\n  //starts loop\r\n  while (true) {\r\n    //while value at i plus 1 is less than or equal to pivot\r\n    while (array[++i] <= pivot) {\r\n      //if i is equal to right, break\r\n      if (i === right) break;\r\n      //pushes animation\r\n      animations.push([[i], false]);\r\n    }\r\n\r\n    //while value at j minus 1 is greater than or equal to pivot\r\n    while (array[--j] >= pivot) {\r\n      //if j is equal break\r\n      if (j === left) break;\r\n      //pushes animation\r\n      animations.push([[j], false]);\r\n    }\r\n\r\n    //if j is less than or equal to i, break\r\n    if (j <= i) break;\r\n\r\n    //pushes animations\r\n    animations.push([[i, array[j]], true]);\r\n    animations.push([[j, array[i]], true]);\r\n\r\n    //swaps index i and j\r\n    swap(array, i, j);\r\n  }\r\n\r\n  //pushes animation\r\n  animations.push([[left, array[j]], true]);\r\n  animations.push([[j, array[left]], true]);\r\n\r\n  //swaps index left and j\r\n  swap(array, left, j);\r\n\r\n  //returns j\r\n  return j;\r\n}","import React, { useState, useEffect, useRef } from 'react';\r\nimport './SortingVisualizer.css';\r\nimport { getQuickSortAnimations } from '../sortingAlgorithms/sortingAlgorithms';\r\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms';\r\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/sortingAlgorithms';\r\n\r\n\r\n//Default array length\r\nconst ARR_LEN = 100;\r\n\r\n//sets min and max for numbers in array\r\nconst MIN_NUM = 5;\r\nconst MAX_NUM = 80;\r\n\r\n//Default delay for arrays\r\nvar DELAY = 5;\r\n\r\n//Color when being compared\r\nconst ACCESSED_COLOUR = 'red';\r\n\r\n//Color when sorted\r\nconst SORTED_COLOUR = 'limegreen';\r\n\r\n\r\n//default SortVisualizer function\r\nexport default function SortVisualizer(props) {\r\n  \r\n    //sets up consts for arrays and sorting\r\n    const [array, setArr] = useState([]);\r\n    const [isSorting, setIsSorting] = useState(false);\r\n    const [isSorted, setIsSorted] = useState(false);\r\n    const containerRef = useRef(null);\r\n\r\n    //initialize the array\r\n    // eslint-disable-next-line\r\n    useEffect(initialiseArray, []);\r\n    function initialiseArray() {\r\n        //if is still sorting, don't initialize\r\n        if (isSorting) return;\r\n\r\n        //if is sorting reset color \r\n        if (isSorted) resetArrayColour();\r\n\r\n        //set is sorted to false\r\n        setIsSorted(false);\r\n\r\n        //creates an array\r\n        const array = [];\r\n\r\n        //pushes random values until set length\r\n        for (let i = 0; i < ARR_LEN; i++) {\r\n        array.push((MAX_NUM - MIN_NUM) * (i / ARR_LEN) + MIN_NUM);\r\n        }\r\n\r\n        //shuffles and sets array\r\n        shuffle(array);\r\n        setArr(array);\r\n    }\r\n\r\n    //function to change size of array\r\n    function changeSize() {\r\n        //if is still sorting, don't initialize\r\n        if (isSorting) return;\r\n\r\n        //if is sorting reset color \r\n        if (isSorted) resetArrayColour();\r\n\r\n        //set is sorted to false\r\n        setIsSorted(false);\r\n\r\n        //creates an array\r\n        const array = [];\r\n\r\n        //pushes random values until random size\r\n        var newSize = randomInt(7, 100);\r\n        for (let i = 0; i < newSize; i++) {\r\n        array.push((MAX_NUM - MIN_NUM) * (i / newSize) + MIN_NUM);\r\n        }\r\n\r\n        //shuffles and sets array\r\n        shuffle(array);\r\n        setArr(array);\r\n    }\r\n\r\n    //function for merge sort \r\n    function mergeSort() {\r\n        //sets conditions for merge sort animation\r\n        DELAY = 5;\r\n        const animations = getMergeSortAnimations(array);\r\n        animateArrayUpdate(animations);\r\n    }\r\n\r\n    //function for insertion sort animation\r\n    function insertionSort() {\r\n        //sets conditions for insertion sort animation\r\n        DELAY = 2;\r\n        const animations = getInsertionSortAnimations(array);\r\n        animateArrayUpdate(animations);\r\n    }\r\n\r\n    //function for quick sort animation\r\n    function quickSort() {\r\n        //sets conditions for quick sort animation\r\n        DELAY = 5;\r\n        const animations = getQuickSortAnimations(array);\r\n        animateArrayUpdate(animations);\r\n    }\r\n\r\n    //function for array animation\r\n    function animateArrayUpdate(animations) {\r\n\r\n        //if is sorting stop\r\n        if (isSorting) return;\r\n\r\n        //sets sorting to true\r\n        setIsSorting(true);\r\n\r\n        //animation commands\r\n        animations.forEach(([comparison, swapped], index) => {\r\n        setTimeout(() => {\r\n            if (!swapped) {\r\n            if (comparison.length === 2) {\r\n                const [i, j] = comparison;\r\n                animateArrayAccess(i);\r\n                animateArrayAccess(j);\r\n            } else {\r\n                const [i] = comparison;\r\n                animateArrayAccess(i);\r\n            }\r\n            } else {\r\n            setArr((prevArr) => {\r\n                const [k, newValue] = comparison;\r\n                const newArr = [...prevArr];\r\n                newArr[k] = newValue;\r\n                return newArr;\r\n            });\r\n            }\r\n        }, index * DELAY);\r\n        });\r\n\r\n        //resets timeout\r\n        setTimeout(() => {\r\n\r\n        //calls animate sorted array\r\n        animateSortedArray();\r\n        }, animations.length * DELAY);\r\n    }\r\n\r\n    //animates array access in the sort\r\n    function animateArrayAccess(index) {\r\n        const arrayBars = containerRef.current.children;\r\n        const arrayBarStyle = arrayBars[index].style;\r\n        setTimeout(() => {\r\n        arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\r\n        }, DELAY);\r\n        setTimeout(() => {\r\n        arrayBarStyle.backgroundColor = '';\r\n        }, DELAY * 2);\r\n    }\r\n\r\n    //animates the sorted array\r\n    function animateSortedArray() {\r\n        const arrayBars = containerRef.current.children;\r\n        for (let i = 0; i < arrayBars.length; i++) {\r\n        const arrayBarStyle = arrayBars[i].style;\r\n        setTimeout(\r\n            () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\r\n            i * DELAY,\r\n        );\r\n        }\r\n        setTimeout(() => {\r\n        setIsSorted(true);\r\n        setIsSorting(false);\r\n        }, arrayBars.length * DELAY);\r\n    }\r\n\r\n    //resets the colour of the array \r\n    function resetArrayColour() {\r\n        const arrayBars = containerRef.current.children;\r\n        for (let i = 0; i < array.length; i++) {\r\n        const arrayBarStyle = arrayBars[i].style;\r\n        arrayBarStyle.backgroundColor = '';\r\n        }\r\n    }\r\n    //buttons and other formating is included below\r\n    return (\r\n        <div className=\"visualizer-container\">\r\n        <div className=\"array-container\" ref={containerRef}>\r\n            {array.map((barHeight, index) => (\r\n            <div\r\n                className=\"array-bar\"\r\n                style={{\r\n                height: `${barHeight}vmin`,\r\n                width: `${100 / ARR_LEN}vw`,\r\n                }}\r\n                key={index}\r\n            ></div>\r\n            ))}\r\n        </div>\r\n        <footer className=\"app-footer\">\r\n            <ul>\r\n            <li>\r\n                <button className=\"app-button\" onClick={initialiseArray}>\r\n                Reset Array\r\n                </button>\r\n            </li>\r\n            <li>\r\n                <button className=\"app-button\" onClick={changeSize}>\r\n                Random Size\r\n                </button>\r\n            </li>\r\n            <li>\r\n                <button className=\"app-button\" onClick={insertionSort}>\r\n                Insertion sort\r\n                </button>\r\n            </li>\r\n            <li>\r\n                <button className=\"app-button\" onClick={mergeSort}>\r\n                Merge sort\r\n                </button>\r\n            </li>\r\n            <li>\r\n                <button className=\"app-button\" onClick={quickSort}>\r\n                Quick sort\r\n                </button>\r\n            </li>\r\n            </ul>\r\n        </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\n//function to generate randome\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n//function to shuffle the array\r\nconst shuffle = (arr) => {\r\n  for (let i = arr.length - 1; i >= 0; i--) {\r\n    const randomIndex = Math.floor(Math.random() * (i + 1));\r\n    const temp = arr[i];\r\n    arr[i] = arr[randomIndex];\r\n    arr[randomIndex] = temp;\r\n  }\r\n};","import React from \"react\";\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}